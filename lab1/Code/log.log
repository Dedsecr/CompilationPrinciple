In file included from ./lexical.l:2,
                 from ./syntax.y:3:
./syntax.y:9:5: error: unknown type name ‘NodeP’
    9 |     NodeP node;
      |     ^~~~~
In file included from ./syntax.y:3:
./lexical.l: In function ‘yylex’:
./lexical.l:52:3: error: ‘yylaval’ undeclared (first use in this function); did you mean ‘yylval’?
   52 | {IF} { yylaval = get_terminal_node("IF"); return IF; }
      |   ^~~~~~~
      |   yylval
./lexical.l:52:3: note: each undeclared identifier is reported only once for each function it appears in
In file included from ./syntax.y:3:
./lexical.l:80:13: error: too many arguments to function ‘get_terminal_node’
   80 | {ID} { yylaval = get_terminal_node("ID", yytext); return ID; }
      |             ^~~~~~~~~~~~~~~~~
In file included from ./lexical.l:3,
                 from ./syntax.y:3:
./node.h:58:7: note: declared here
   58 | NodeP get_terminal_node(char *data_string)
      |       ^~~~~~~~~~~~~~~~~
./syntax.y: In function ‘yyparse’:
./syntax.y:66:37: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   66 | Program : ExtDefList { $$ = get_nonterminal_node(@$.first_line, "Program", 1, $1); root = $$; }
      |                                     ^
./syntax.y:66:117: warning: assignment to ‘NodeP’ {aka ‘Node *’} from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
   66 | Program : ExtDefList { $$ = get_nonterminal_node(@$.first_line, "Program", 1, $1); root = $$; }
      |                                                                                                                     ^
./syntax.y:68:47: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   68 | ExtDefList : ExtDef ExtDefList { $$ = get_nonterminal_node(@$.first_line, "ExtDefList", 2, $1, $2); }
      |                                               ^
./syntax.y:69:24: warning: assignment to ‘int’ from ‘void *’ makes integer from pointer without a cast [-Wint-conversion]
   69 |     |   { $$ = NULL; }
      |                        ^
./syntax.y:71:51: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   71 | ExtDef : Specifier ExtDecList SEMI { $$ = get_nonterminal_node(@$.first_line, "ExtDef", 3, $1, $2, $3); }
      |                                                   ^
./syntax.y:72:37: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   72 |     | Specifier SEMI { $$ = get_nonterminal_node(@$.first_line, "ExtDef", 2, $1, $2); }
      |                                     ^
./syntax.y:73:46: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   73 |     | Specifier FunDec CompSt { $$ = get_nonterminal_node(@$.first_line, "ExtDef", 3, $1, $2, $3); }
      |                                              ^
./syntax.y:75:36: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   75 | ExtDecList : VarDec { $$ = get_nonterminal_node(@$.first_line, "ExtDecList", 1, $1); }
      |                                    ^
./syntax.y:76:46: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   76 |     | VarDec COMMA ExtDecList { $$ = get_nonterminal_node(@$.first_line, "ExtDecList", 3, $1, $2, $3); }
      |                                              ^
./syntax.y:80:33: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   80 | Specifier : TYPE { $$ = get_nonterminal_node(@$.first_line, "Specifier", 1, $1); }
      |                                 ^
./syntax.y:81:38: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   81 |     | StructSpecifier { $$ = get_nonterminal_node(@$.first_line, "Specifier", 1, $1); }
      |                                      ^
./syntax.y:83:62: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   83 | StructSpecifier : STRUCT OptTag LC DefList RC { $$ = get_nonterminal_node(@$.first_line, "StructSpecifier", 5, $1, $2, $3, $4, $5); }
      |                                                              ^
./syntax.y:84:33: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   84 |     | STRUCT Tag { $$ = get_nonterminal_node(@$.first_line, "StructSpecifier", 2, $1, $2); }
      |                                 ^
./syntax.y:86:28: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   86 | OptTag : ID { $$ = get_nonterminal_node(@$.first_line, "OptTag", 1, $1); }
      |                            ^
./syntax.y:87:22: warning: assignment to ‘int’ from ‘void *’ makes integer from pointer without a cast [-Wint-conversion]
   87 |     | { $$ = NULL; }
      |                      ^
./syntax.y:89:25: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   89 | Tag : ID { $$ = get_nonterminal_node(@$.first_line, "Tag", 1, $1); }
      |                         ^
./syntax.y:93:28: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   93 | VarDec : ID { $$ = get_nonterminal_node(@$.first_line, "VarDec", 1, $1); }
      |                            ^
./syntax.y:94:39: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   94 |     | VarDec LB INT RB { $$ = get_nonterminal_node(@$.first_line, "VarDec", 4, $1, $2, $3, $4); }
      |                                       ^
./syntax.y:96:42: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   96 | FunDec : ID LP VarList RP { $$ = get_nonterminal_node(@$.first_line, "FunDec", 4, $1, $2, $3, $4); }
      |                                          ^
./syntax.y:97:31: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   97 |     | ID LP RP { $$ = get_nonterminal_node(@$.first_line, "FunDec", 3, $1, $2, $3); }
      |                               ^
./syntax.y:99:49: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
   99 | VarList : ParamDec COMMA VarList { $$ = get_nonterminal_node(@$.first_line, "VarList", 3, $1, $2, $3); }
      |                                                 ^
./syntax.y:100:31: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  100 |     | ParamDec { $$ = get_nonterminal_node(@$.first_line, "VarList", 1, $1); }
      |                               ^
./syntax.y:102:44: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  102 | ParamDec : Specifier VarDec { $$ = get_nonterminal_node(@$.first_line, "ParamDec", 2, $1, $2); }
      |                                            ^
./syntax.y:106:48: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  106 | CompSt : LC DefList StmtList RC { $$ = get_nonterminal_node(@$.first_line, "CompSt", 4, $1, $2, $3, $4); }
      |                                                ^
./syntax.y:108:41: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  108 | StmtList : Stmt StmtList { $$ = get_nonterminal_node(@$.first_line, "StmtList", 2, $1, $2); }
      |                                         ^
./syntax.y:109:22: warning: assignment to ‘int’ from ‘void *’ makes integer from pointer without a cast [-Wint-conversion]
  109 |     | { $$ = NULL; }
      |                      ^
./syntax.y:111:32: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  111 | Stmt : Exp SEMI { $$ = get_nonterminal_node(@$.first_line, "Stmt", 2, $1, $2); }
      |                                ^
./syntax.y:112:29: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  112 |     | CompSt { $$ = get_nonterminal_node(@$.first_line, "Stmt", 1, $1); }
      |                             ^
./syntax.y:113:38: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  113 |     | RETURN Exp SEMI { $$ = get_nonterminal_node(@$.first_line, "Stmt", 3, $1, $2, $3); }
      |                                      ^
./syntax.y:114:62: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  114 |     | IF LP Exp RP Stmt %prec LOWER_THAN_ELSE { $$ = get_nonterminal_node(@$.first_line, "Stmt", 5, $1, $2, $3, $4, $5); }
      |                                                              ^
./syntax.y:115:50: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  115 |     | IF LP Exp RP Stmt ELSE Stmt { $$ = get_nonterminal_node(@$.first_line, "Stmt", 7, $1, $2, $3, $4, $5, $6, $7); }
      |                                                  ^
./syntax.y:116:43: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  116 |     | WHILE LP Exp RP Stmt { $$ = get_nonterminal_node(@$.first_line, "Stmt", 5, $1, $2, $3, $4, $5); }
      |                                           ^
./syntax.y:120:38: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  120 | DefList : Def DefList { $$ = get_nonterminal_node(@$.first_line, "DefList", 2, $1, $2); }
      |                                      ^
./syntax.y:121:22: warning: assignment to ‘int’ from ‘void *’ makes integer from pointer without a cast [-Wint-conversion]
  121 |     | { $$ = NULL; }
      |                      ^
./syntax.y:123:45: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  123 | Def : Specifier DecList SEMI { $$ = get_nonterminal_node(@$.first_line, "Def", 3, $1, $2, $3); }
      |                                             ^
./syntax.y:125:30: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  125 | DecList : Dec { $$ = get_nonterminal_node(@$.first_line, "DecList", 1, $1); }
      |                              ^
./syntax.y:126:40: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  126 |     | Dec COMMA DecList { $$ = get_nonterminal_node(@$.first_line, "DecList", 3, $1, $2, $3); }
      |                                        ^
./syntax.y:128:29: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  128 | Dec : VarDec { $$ = get_nonterminal_node(@$.first_line, "Dec", 1, $1); }
      |                             ^
./syntax.y:129:42: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  129 |     | VarDec ASSIGNOP Exp { $$ = get_nonterminal_node(@$.first_line, "Dec", 3, $1, $2, $3); }
      |                                          ^
./syntax.y:133:39: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  133 | Exp : Exp ASSIGNOP Exp { $$ = get_nonterminal_node(@$.first_line, "Exp", 3, $1, $2, $3); }
      |                                       ^
./syntax.y:134:34: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  134 |     | Exp AND Exp { $$ = get_nonterminal_node(@$.first_line, "Exp", 3, $1, $2, $3); }
      |                                  ^
./syntax.y:135:33: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  135 |     | Exp OR Exp { $$ = get_nonterminal_node(@$.first_line, "Exp", 3, $1, $2, $3); }
      |                                 ^
./syntax.y:136:36: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  136 |     | Exp RELOP Exp { $$ = get_nonterminal_node(@$.first_line, "Exp", 3, $1, $2, $3); }
      |                                    ^
./syntax.y:137:35: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  137 |     | Exp PLUS Exp { $$ = get_nonterminal_node(@$.first_line, "Exp", 3, $1, $2, $3); }
      |                                   ^
./syntax.y:138:36: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  138 |     | Exp MINUS Exp { $$ = get_nonterminal_node(@$.first_line, "Exp", 3, $1, $2, $3); }
      |                                    ^
./syntax.y:139:35: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  139 |     | Exp STAR Exp { $$ = get_nonterminal_node(@$.first_line, "Exp", 3, $1, $2, $3); }
      |                                   ^
./syntax.y:140:34: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  140 |     | Exp DIV Exp { $$ = get_nonterminal_node(@$.first_line, "Exp", 3, $1, $2, $3); }
      |                                  ^
./syntax.y:141:32: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  141 |     | LP Exp RP { $$ = get_nonterminal_node(@$.first_line, "Exp", 3, $1, $2, $3); }
      |                                ^
./syntax.y:142:32: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  142 |     | MINUS Exp { $$ = get_nonterminal_node(@$.first_line, "Exp", 2, $1, $2); }
      |                                ^
./syntax.y:143:30: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  143 |     | NOT Exp { $$ = get_nonterminal_node(@$.first_line, "Exp", 2, $1, $2); }
      |                              ^
./syntax.y:144:36: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  144 |     | ID LP Args RP { $$ = get_nonterminal_node(@$.first_line, "Exp", 4, $1, $2, $3, $4); }
      |                                    ^
./syntax.y:145:31: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  145 |     | ID LP RP { $$ = get_nonterminal_node(@$.first_line, "Exp", 3, $1, $2, $3); }
      |                               ^
./syntax.y:146:36: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  146 |     | Exp LB Exp RB { $$ = get_nonterminal_node(@$.first_line, "Exp", 4, $1, $2, $3, $4); }
      |                                    ^
./syntax.y:147:33: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  147 |     | Exp DOT ID { $$ = get_nonterminal_node(@$.first_line, "Exp", 3, $1, $2, $3); }
      |                                 ^
./syntax.y:148:25: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  148 |     | ID { $$ = get_nonterminal_node(@$.first_line, "Exp", 1, $1); }
      |                         ^
./syntax.y:149:26: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  149 |     | INT { $$ = get_nonterminal_node(@$.first_line, "Exp", 1, $1); }
      |                          ^
./syntax.y:150:28: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  150 |     | FLOAT { $$ = get_nonterminal_node(@$.first_line, "Exp", 1, $1); }
      |                            ^
./syntax.y:152:38: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  152 | Args : Exp COMMA Args { $$ = get_nonterminal_node(@$.first_line, "Args", 3, $1, $2, $3); }
      |                                      ^
./syntax.y:153:26: warning: assignment to ‘int’ from ‘NodeP’ {aka ‘Node *’} makes integer from pointer without a cast [-Wint-conversion]
  153 |     | Exp { $$ = get_nonterminal_node(@$.first_line, "Args", 1, $1); }
      |                          ^
./syntax.tab.c:1717:7: warning: implicit declaration of function ‘yyerror’; did you mean ‘yyerrok’? [-Wimplicit-function-declaration]
 1717 |       yyerror (YY_("syntax error"));
      |       ^~~~~~~
      |       yyerrok
./syntax.y: At top level:
./syntax.y:158:1: warning: return type defaults to ‘int’ [-Wimplicit-int]
  158 | yyerror(char* msg) {
      | ^~~~~~~
make: *** [Makefile:24: syntax] Error 1
